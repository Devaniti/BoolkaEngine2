lexer grammar render_graph_lexer;

// Resource definition
RESOURCE: 'Resource';

BUFFER: 'Buffer';
TEXTURE1D: 'Texture1D';
TEXTURE2D: 'Texture2D';
TEXTURE3D: 'Texture3D';

// PSO definition
PSO: 'PSO';

GRAPHICS: 'Graphics';
COMPUTE: 'Compute';

// Shader definition
SHADER: 'Shader';

// Variable definitions
VARIABLE: 'Variable';

// Parameters
TYPE: 'Type';
FORMAT: 'Format';
RESOLUTION: 'Resolution';
OPTIMIZED_CLEAR_VALUE: 'OptimizedClearValue';
SLICE_COUNT: 'SliceCount';
SIZE: 'Size';
FILENAME: 'Filename';
ENTRYPOINT: 'Entrypoint';
UPDATE_FREQUENCY: 'UpdateFrequency';

// Shader types
VS: 'VS';
AS: 'AS';
MS: 'MS';
PS: 'PS';
CS: 'CS';

// Resource Formats
R8: 'R8';
R8G8: 'R8G8';
R8G8B8A8: 'R8G8B8A8';
R16: 'R16';
R16G16: 'R16G16';
R16G16B16A16: 'R16G16B16A16';
R32: 'R32';
R32G32: 'R32G32';
R32G32B32: 'R32G32B32';
R32G32B32A32: 'R32G32B32A32';
R8_UNORM: 'R8_UNORM';
R8G8_UNORM: 'R8G8_UNORM';
R8G8B8A8_UNORM: 'R8G8B8A8_UNORM';
R8_SNORM: 'R8_SNORM';
R8G8_SNORM: 'R8G8_SNORM';
R8G8B8A8_SNORM: 'R8G8B8A8_SNORM';
R8_UINT: 'R8_UINT';
R8G8_UINT: 'R8G8_UINT';
R8G8B8A8_UINT: 'R8G8B8A8_UINT';
R8_SINT: 'R8_SINT';
R8G8_SINT: 'R8G8_SINT';
R8G8B8A8_SINT: 'R8G8B8A8_SINT';
R16_FLOAT: 'R16_FLOAT';
R16G16_FLOAT: 'R16G16_FLOAT';
R16G16B16A16_FLOAT: 'R16G16B16A16_FLOAT';
R16_UNORM: 'R16_UNORM';
R16G16_UNORM: 'R16G16_UNORM';
R16G16B16A16_UNORM: 'R16G16B16A16_UNORM';
R16_SNORM: 'R16_SNORM';
R16G16_SNORM: 'R16G16_SNORM';
R16G16B16A16_SNORM: 'R16G16B16A16_SNORM';
R16_UINT: 'R16_UINT';
R16G16_UINT: 'R16G16_UINT';
R16G16B16A16_UINT: 'R16G16B16A16_UINT';
R16_SINT: 'R16_SINT';
R16G16_SINT: 'R16G16_SINT';
R16G16B16A16_SINT: 'R16G16B16A16_SINT';
D32_FLOAT: 'D32_FLOAT';
R32_FLOAT: 'R32_FLOAT';
R32G32_FLOAT: 'R32G32_FLOAT';
R32G32B32A32_FLOAT: 'R32G32B32A32_FLOAT';
R32_UINT: 'R32_UINT';
R32G32_UINT: 'R32G32_UINT';
R32G32B32A32_UINT: 'R32G32B32A32_UINT';
R32_SINT: 'R32_SINT';
R32G32_SINT: 'R32G32_SINT';
R32G32B32A32_SINT: 'R32G32B32A32_SINT';

// Variable Formats
UINT: 'uint';
UINT2: 'uint2';
UINT3: 'uint3';
UINT4: 'uint4';
FLOAT: 'float';
FLOAT2: 'float2';
FLOAT3: 'float3';
FLOAT4: 'float4';

// Update frequencies

CONST: 'Const';
STALL: 'Stall';
FRAME: 'Frame';

OPEN_BRACKET: '{';
CLOSE_BRACKET: '}';

fragment ID_START: 'a' .. 'z' | 'A' .. 'Z' | '_';
fragment ID_CHAR: ID_START | '0' .. '9';

ID: ID_START ID_CHAR*;

fragment FILENAME_CHAR: '0' .. '9' | 'a' .. 'z' | 'A' .. 'Z' | '.' | '_' | '-';
fragment DIRECTORY_SEPARATOR: '/';
fragment FILENAME_VALUE: FILENAME_CHAR+;
fragment DIRECTORY_VALUE: (FILENAME_VALUE DIRECTORY_SEPARATOR)+;

FILEPATH_VALUE: DIRECTORY_VALUE? FILENAME_VALUE;

WHITESPACE: [ \r\n\t]+ -> skip;
